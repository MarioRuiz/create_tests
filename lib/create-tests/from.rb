
class CreateTests

  ##############################################################################
  # Generate tests from a file that contains Request Hashes.
  # More info about Request Hashes: https://github.com/MarioRuiz/Request-Hash
  # @param requests_file [String]. Path and file name. Could be absolute or relative to project root folder.
  # @param type [Symbol]. (default :request_hash). The kind of content that requests_file contains.
  # @param test [Symbol]. (default :rspec). What kind of tests we want to create
  # @param mode [Symbol]. (default :append). :overwrite, :append, :dont_overwrite. How we want to create the tests.
  #   :overwrite, it will overwrite the test, settings, helper... files in case they exist so you will loose your original source code.
  #   :dont_overwrite, it will create only the files that don't exist previously
  #   :append, it will append or create the tests or helpers that corrently don't exist on every file, but it won't modify any other code.
  ##############################################################################
  def self.from(requests_file, type: :request_hash, test: :rspec, mode: :append)
    begin
      f = File.new("#{requests_file}_create_tests.log", "w")
      f.sync = true
      @logger = Logger.new f
      puts "- Logs: #{requests_file}_create_tests.log"
    rescue StandardError => e
      warn "** Not possible to create the Logger file"
      warn e
      @logger = Logger.new nil
    end
    @logger.info "requests_file: #{requests_file}, type: #{type}, test: #{test}, mode: #{mode}"
    requests_file_orig = requests_file

    requests_file = if requests_file["./"].nil?
                      requests_file
                    else
                      Dir.pwd.to_s + "/" + requests_file.gsub("./", "")
                    end
    unless File.exist?(requests_file)
      message = "** The file #{requests_file} doesn't exist"
      @logger.fatal message
      raise message
    end

    unless [:request_hash].include?(type)
      message = "** Wrong type parameter: #{type}"
      @logger.fatal message
      raise message
    end

    unless [:rspec].include?(test)
      message = "** Wrong test parameter: #{test}"
      @logger.fatal message
      raise message
    end

    unless [:overwrite, :dont_overwrite, :append].include?(mode)
      message = "** Wrong mode parameter: #{mode}"
      @logger.fatal message
      raise message
    end

    if mode == :overwrite
      message = "** Pay attention, if any of the files exist, will be overwritten"
      @logger.warn message
      warn message
    elsif mode == :append
      if Dir["./spec/*/**_spec.rb"].size > 0
        message = "** Pay attention, if any of the test files exist or the help file exist only will be added the tests, methods that are missing."
        @logger.warn message
        warn message
      end
    end

    @params = Array.new

    Dir.mkdir "./spec" unless test != :rspec or Dir.exist?("./spec")

    add_settings = true
    settings_file = "./settings/general.rb"
    helper_file = './spec/helper.rb'
    Dir.mkdir "./settings" unless Dir.exist?("./settings")
    if File.exist?(settings_file) and mode!=:overwrite
      message = "** The file #{settings_file} already exists so no content will be added to it.\n"
      message += "   Remove the settings file to be able to be generated by create_tests or set mode: :overwrite"
      @logger.warn message
      warn message
      add_settings = false
    end
    add_helper = true
    helper_txt = ""
    if File.exist?(helper_file)
      if mode == :dont_overwrite
        message = "** The file #{helper_file} already exists so no content will be added to it.\n"
        message += "   Remove the helper file to be able to be generated by create_tests or set mode: :overwrite or :append"
        @logger.warn message
        warn message
        add_helper = false
      elsif mode == :append
        helper_txt = File.read(helper_file)
      end
    end

    begin
      eval("require '#{requests_file}'")
    rescue Exception => stack
      message = "\n\n** Error evaluating the ruby file containing the requests: \n" + stack.to_s
      @logger.fatal message
      raise message
    end

    if Kernel.const_defined?(:Swagger)
      first_module = Swagger
    elsif Kernel.const_defined?(:OpenApi)
      first_module = OpenApi
    elsif Kernel.const_defined?(:Requests)
      first_module = Requests
    else
      message = "** The requests need to be inside a module named Swagger, OpenApi or Requests. For example:\n"
      message += "   module Swagger\n  module UberApi\n    module Products\n      def self.list_products\n"
      @logger.fatal message
      raise message
    end

    modules = get_modules(first_module)
    modules.uniq!

    if add_settings
      mods_to_include = []
      modules.each do |m|
        mods_to_include << m.scan(/^(.+)::/).join
      end
      mods_to_include.uniq!
      File.open(settings_file, "w") { |file| file.write(create_settings(requests_file_orig, mods_to_include)) }
      message = "- Settings: #{settings_file}"
      @logger.info message
      puts message
      `rufo #{settings_file}`
    end

    modules.each do |mod_txt|
      mod_name = mod_txt.scan(/::(\w+)$/).join
      folder = "./spec/#{mod_name}"
      unless Dir.exist?(folder)
        Dir.mkdir folder
        @logger.info "Created folder: #{folder}"
      end
      mod_obj = eval("#{mod_txt}")
      mod_methods_txt = eval ("#{mod_txt}.methods(false)")
      mod_methods_txt.each do |method_txt|
        test_file = "#{folder}/#{method_txt}_spec.rb"
        if File.exist?(test_file) and mode==:dont_overwrite
          message = "** The file #{test_file} already exists so no content will be added to it.\n"
          message += "   Remove the test file to be able to be generated by create_tests or set mode: :overwrite, or mode: :append"
          @logger.warn message
          warn message
        else
          if File.exist?(test_file) and mode == :append
            test_txt = File.read(test_file)
          else
            test_txt = ''
          end
          modified, txt = create_test(mod_txt, method_txt, mod_obj.method(method_txt),test_txt)
          File.open(test_file, "w") { |file| file.write(txt) }
          `rufo #{test_file}`
          if test_txt == ""
            message = "- Test created: #{test_file}"
          elsif modified
            message = "- Test updated: #{test_file}"
          else 
            message = "- Test without changes: #{test_file}"
          end
          @logger.info message
          unless message.include?("without changes")
            puts message
          end
        end
      end
    end

    if add_helper
      @params.uniq!
      File.open(helper_file, "w") { |file| file.write(create_helper(@params, helper_txt)) }
      message = "- Helper: #{helper_file}"
      @logger.info message
      puts message
      `rufo #{helper_file}`
    end
  end
end